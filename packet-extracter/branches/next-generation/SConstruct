### Platform configuration ###

platform = str(ARGUMENTS.get('OS', Platform()))
cygwin = platform == "cygwin"
darwin = platform == "darwin"
win32 = cygwin or platform == "windows"

######## Setup environment ########
env = Environment()
env['CFLAGS'] = ['-g', '-pipe', '-Wall']
env['LINKFLAGS'] = []
env['LIBPATH'] = []
env['LIBS'] = []
env['CPPDEFINES'] = []
env['CPPPATH'] = []
if cygwin:
	env['CFLAGS'] += ['-mno-cygwin']
	env['LINKFLAGS'] += ['-mno-cygwin']
env['CCFLAGS'] = env['CFLAGS']


libenv = env.Copy()
if win32:
	if cygwin:
		libenv['CFLAGS'] += ['-mdll']
	libenv['CPPDEFINES'] += ['WIN32']
elif not darwin:
	libenv['CFLAGS'] += ['-fPIC']
	libenv['LINKFLAGS'] += ['-fPIC']
libenv['CCFLAGS'] = libenv['CFLAGS']

if cygwin:
	def linkDLLAction(target, source, env):
		sources = []
		for f in source:
			sources += [str(f)]

		(temp, dllname) = os.path.split(str(target[0]))
		(targetName, temp) = os.path.splitext(str(target[0]))
		command = ['dlltool', '--dllname', dllname,
			'-z', targetName + '.def',
			'-l', targetName + '.lib',
			'--export-all-symbols',
			'--add-stdcall-alias'] + sources
		print ' '.join(command)
		ret = os.spawnvp(os.P_WAIT, command[0], command)
		if ret != 0:
			return 0

		command = ['dllwrap', '--driver=g++', '--target=i386-mingw32',
			'--def', targetName + '.def', '-mno-cygwin'] + \
			sources + ['-o', str(target[0])]
		if env.has_key('LIBPATH'):
			for dir in env['LIBPATH']:
				command += ['-L' + dir]
		if env.has_key('LIBS'):
		 	for flag in env['LIBS']:
				command += ['-l' + flag]
		command += ['-lstdc++']

		print ' '.join(command)
		return os.spawnvp(os.P_WAIT, command[0], command)

	NativeDLLBuilder = Builder(action = linkDLLAction,
		emitter = '$LIBEMITTER',
		suffix = 'dll',
		src_suffix = '$OBJSUFFIX',
		src_builder = 'SharedObject')
elif darwin:
	def linkBundleAction(target, source, env):
		sources = []
		for f in source:
			sources += [str(f)]

		command = [env['CXX'], '-bundle', '-undefined',
			   ' dynamic_lookup', '-o', str(target[0])] + sources
		if env.has_key('LIBPATH'):
			for dir in env['LIBPATH']:
				command += ['-L' + dir]
		if env.has_key('LIBS'):
		 	for flag in env['LIBS']:
				command += ['-l' + flag]

		print ' '.join(command)
		return os.spawnvp(os.P_WAIT, command[0], command)

	NativeDLLBuilder = Builder(action = linkBundleAction,
				   emitter = '$LIBEMITTER',
				   prefix = '',
				   suffix = 'bundle',
				   src_suffix = '$OBJSUFFIX',
				   src_builder = 'SharedObject')
else:
	NativeDLLBuilder = libenv['BUILDERS']['SharedLibrary']
libenv['BUILDERS']['NativeDLL'] = NativeDLLBuilder


Export('env libenv win32 cygwin')
SConscript(['objdump/SConscript', 'ui/SConscript'])
