#!/usr/bin/env perl

use strict;
use warnings;

if (@ARGV < 2) {
	print STDERR "No input file given. Usage: extract-packets.pl <ASM> <OUTPUT>\n"
		. "  ASM: the disassembled output of ragexe.exe, as generated by disasm.\n"
		. "  OUTPUT: the filename of the output file to write to.\n";
	exit (1);
}
if (!open (F, "< $ARGV[0]")) {
	print STDERR "Unable to open $ARGV[0]\n";
	exit (1);
}

# Look for the address of the function that determines packet sizes.
our $addr;
while ((my $line = <F>)) {
	if ($line =~ /E8ED030000/) {
		($addr) = $line =~ /call ([A-Z0-9]+)/;
		last;
	}
}

if (!defined($addr)) {
	print STDERR "Adress of packet size function not found.\n";
	close(F);
	exit(1);
}

print "Packet size function: $addr\n";
print "Extracting function...\n";

# Go to that address and get the content of the entire function
our @function = ();
while ((my $line = <F>)) {
	my $stop = 0;
	if ($line =~ /^:$addr /) {
		while (($line = <F>)) {
			$line =~ s/[\r\n]//sg;
			if ($line eq '') {
				$stop = 1;
				last;
			}
			push(@function, $line);
		}
	}
	last if ($stop);
}
close(F);

if (@function == 0) {
	print STDERR "Unable to extract packet size function.\n";
	exit(1);
}

# Extract packets
our %packets = ();
print "Extracting packets...\n";
for (my $i = 0; $i < @function; $i++) {
	$_ = $function[$i];
	if (/^:[A-Z0-9]+ [A-Z0-9]{14,}[\t\s]+mov dword\[.*?\], ([0-9A-Z]{8,})$/) {
		my $packet = substr($1, 4);
		my $size = 0;

		for ($i = $i + 1; $i < @function; $i++) {
			$_ = $function[$i];
			if (/^:[A-Z0-9]+ [A-Z0-9]{12,}[\t\s]+mov dword\[eax.*?\], ([0-9A-Z]{8,})$/) {
				# Packet size
				$size = hex($1);
				last;
			} elsif (/:[A-Z0-9]+ [A-Z0-9]{14,}[\t\s]+mov dword\[.*?\], ([0-9A-Z]{8,})$/) {
				# New packet switch
				$i--;
				last;
			}
		}

		$packets{$packet} = $size;
	}
}

open(F, "> $ARGV[1]");
foreach my $key (sort keys %packets) {
	print F "$key $packets{$key}\n";
}
close(F);
print "Done.\n";
