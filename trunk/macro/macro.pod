=head1 NAME

B<macro.pl> - plugin for openkore 1.5.2 and later

=head1 VERSION

This documentation applies to B<macro.pl> version 0.9.0 cvs

Documentation: $Revision$ $Date$

=head1 DESCRIPTION

With this plugin you can predefine command sequences (macros) which are
run either manually or by situation-dependent triggers.

This document describes the functions and global variables of B<macro.pl>

Please refer to L<http://openkore.sf.net/macro> for a description of
B<macro>'s configuration file syntax.

=head1 DOCUMENTATION

=head2 variables and hashes

=over 4

=item C<%macros>

Hash containing the macros and automacros.

=item C<%varStack>

Variable stack, set with C<setVar(variable, value)> and get with C<getVar(variable)>.

=item C<$cfID>

Config file ID, set by Settings::addConfigFile

=back

=head2 functions used by macros

=over 4

=item C<setVar(variable, value)>

Sets a variable with the value given as argument. Can be accessed either
via C<getVar("I<variable>")> or directly with $varStack{variable}.

Example: C<setVar("foo", "bar")>

Returns: 1

=item C<getVar(variable)>

Gets a variable from %varStack hash.

Example: C<getVar("lastPMnick")>

Returns: value of $varStack{variable} or undef if empty

=item C<getNPCid(position)>

Gets the array index of the NPC located at the given position. The argument
is a string containing the X and Y coordinates, separated by a whitespace.

Example: C<getNPCid("172 135")>

Returns: array index or -1 if no NPC was found at the given location

=item C<getPlayerID(name, r_pool)>

Gets the array index of the player named by I<name>. It looks at r_pool,
which is a reference to a variable.

Example: C<getPlayerID("Tom Jones", \@::playersID)>

Returns: array index or -1 if no player was found with that name

=item C<getStorageID(item, r_pool)>

Gets the array index of the item I<name> in storage. It looks at r_pool,
which is a reference to a variable.

Example: C<getStorageID("red potion", \@{$cart{inventory})>

Returns: array index or -1 if the item was not found.

=item C<getInventoryAmount(item)>

Gets the amount of an item I<name> in inventory.

Returns: amount

=item C<getCartAmount(item)>

Gets the amount of an item I<name> in cart.

Returns: amount

=item C<getShopAmount(item)>

Gets the amount of an item I<name> in shop.

Returns: amount

=item C<getSoldOut>

Gets the amount of shop slots that are sold out.

Returns: amount

=item C<getRandom(items)>

I<items> is a string containing the elements separated by whitespaces.

Example: C<getRandom("foo bar yatta blah")>

Returns: a random element of the list

=item C<pushMacro(name, n)>

Inserts another macro at the current position into the macro queue.
If I<n> is given, it will insert the macro I<n> times.

Returns: 0 or undef if macro to be inserted was not found.

=item C<logMessage(message)>

Logs I<message> to openkore's console.

=item C<releaseAM(name)>

Removes automacro I<name> from run-once list.

Returns: 1 if succeeded, 0 if I<name> was not found.

=back

=head2 functions used by automacros

=over 4

=item C<isInRunOnce(name)>

Checks whether automacro I<name> is in the run-once list.

Returns: 1 (true), 0 (false)

=item C<checkCart(item)>

Checks whether I<item> is in cart.

Returns: 1 (true), 0 (false)

=item C<checkCast(spell, r_hash)>

Checks whether I<spell> is casted on or affecting the character.
r_hash is a reference to a hash containing I<targetID>, I<x>, I<y>, 
I<skillID>.

=item C<checkClass(class)>

Checks whether the current character is of class I<class>.

Returns: 1 (true), 0 (false)

=item C<checkEquip(conditions)>

Checks whether the character has I<conditions> equipped.
I<conditions> is a whitespace separated list of keys and values, 
where a key is one of these: "garment", "arrow", "headlo", "headmid",
"headmidlo", "helmet", "armor", "shield", "1hweapon", "2hweapon", 
"accleft", "accright", "accessory". And the value is the item name,
where blanks are replaces by an underscore.

Example: C<checkEquip("garment Muffler_[Whisper]_[1] helmet Sakkat")>

Returns: 1 (true), 0 (false)

=item C<checkInventory(item)>

Checks whether I<item> is in inventory..

Returns: 1 (true), 0 (false)

=item C<checkLevel(condition, pool)>

Checks whether either base- or joblevel matches I<condition>.
I<pool> is either "job" or "base".

Returns: 1 (true), 0 (false)

=item C<checkLoc(location)>

Checks for location. I<location> is a whitespace seperated list
containing I<map>, I<x>, I<y>, I<x2>, I<y2>, where I<map> is
mandatory. If I<x> and I<y> are given, it checks whether the
character is standing at I<map> I<x> I<y>. If I<x2> and I<y2>
are given, it checks whether the caracter is standing at I<map>
somewhere between I<x> and I<x2> and I<y> and I<y2>, where
I<x> < I<x2> and I<y> > I<y2>.

Example: C<checkLoc("prontera 147 125 160 100")>

Returns: 1 (true), 0 (false)

=item C<checkPercent(condition, pool)>

Checks whether either HP or SP matches I<condition>. I<pool> is
either "sp" or "hp".

Example: C<checkPercent("< 30", "hp")>

Returns: 1 (true), 0 (false)

=item C<checkPerson(name)>

Checks whether I<name> is on our screen.

Returns: 1 (true), 0 (false)

=item C<checkPM(pmline, r_hash)>

Checks whether a PM was received. I<pmline> has the following syntax:
"/trigger message or regexp/,nick1,nick2,nick3,..", I<r_hash> is a
reference to a hash containing I<privMsgUser> and I<privMsg>. This
function sets the variable I<lastPMnick> which can be accessed either
via C<getVar("I<variable>")> or directly with $varStack{variable}.

Example: C<checkPM("/^my trigger message$/,Tom Jones", $arg)>

Returns: 1 (true), 0 (false)

=item C<checkShop(item)>

Checks whether I<item> is in shop.

Returns: 1 (true), 0 (false)

=item C<checkSoldOut(condition)>

Checks whether the soldout slots of the shop matches I<conditíon>,

Example: C<checkSoldOut(">= 3")>.

Returns: 1 (true), 0 (false)

=item C<checkStatus(status)>

Checks whether we are I<status>. Allows prepended "not" to negate
the query.

Example: C<checkStatus("not awaken")>

Returns: 1 (true), 0 (false)

=item C<checkVar(condition)>

Checks if a variable's value matches a certain condition. Variable,
condition and value are seperated by a whitespace.

Example: C<checkVar("something >= 100")>

Returns: 1 (true), 0 (false)

=item C<checkZeny(condition)>

Checks whether we have our Zeny matching I<condition>.

Example: C<checkZeny("<= 100000")>

Returns: 1 (true), 0 (false)

=back

=head2 functions used by both

=over 4

=item C<ai_isIdle>

Checks whether AI is idle.

Returns: 1 if AI is "macro" or "deal", else 0

=item C<findMacroID(name)>

Returns: macro array index for I<name> or -1 if not found.

=item C<loadMacro(id)>

Loads macro with id I<id> into an array.

Returns: this array

=item C<clearMacro>

Clears macro queue and removes 'macro' from AI queue.

=back

=head2 functions accessed via command line

=over 4

=item C<automacroReset(name)>

If I<name> is given, I<name> will be removed from automacro run-once list,
else the whole list is cleared.

=item C<usage>

Sends an usage overview to console.

=item C<showVersion>

Sends the version number to console.

=item C<list_macros>

Sends an overview of all available macros and automacros to console.

=item C<runMacro(name, n)>

Runs the macro I<name>, if I<n> is specified, it will run I<n> times.

=back

=head2 utility functions

=over 4

=item C<between(arg1, arg2, arg3)>

Checks whether I<arg2> is between (or equal) I<arg1> and I<arg3>.

Returns: 1 (true), 0 (false)

=item C<cmpr(arg1, condition, arg2)>

Checks whether I<arg1> and I<arg2> match I<condition>.

Example: cmpr(12, "<=", 28).

Returns: 1 (true), 0 (false)

=item C<parseArgs(string)>

Parses I<string> into it's components where I<string> is either I<arg1 arg2 arg3> or I<"arg1" arg2 arg3>.

Returns: array containing the three arguments.

=item C<parseCmd(string)>

Parses I<string> and replaces all '@'-constructs if possible.

Returns: parsed string, undef if I<string> was @(log|call|release|pause|set) or substitution failed. If the substitution failed, the macro queue is cleared.

=item C<parseMacroFile(filename, r_hash)>

Parses the file I<filename> for macros and automacros and puts them into the hash reference I<r_hash>.

=item C<debug(string)>

Sends I<string> to openkore's log facility if 'macro_debug' is set to 1 or higher.

=item C<error(string)>

Sends I<string> to openkore's error log facility.

=back

=head1 AVAILABILITY

Get the latest release from L<http://openkore.sf.net/macro/#download>
or via CVS:

C<cvs -d:pserver:anonymous@cvs.sf.net:/cvsroot/openkore login>

C<cvs -d:pserver:anonymous@cvs.sf.net:/cvsroot/openkore co -P macro>

=head1 AUTHOR

Arachno <arachnophobia at users dot sf dot net>
