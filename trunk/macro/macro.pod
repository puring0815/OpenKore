=head1 NAME

B<macro.pl> - plugin for openkore 1.5.2 and later

=head1 VERSION

This documentation applies to B<macro.pl> version 0.9.0 cvs

Documentation version 20050507-0

=head1 DESCRIPTION

With this plugin you can predefine command sequences (macros) which are
run either manually or by situation-dependent triggers.

This document describes the functions and global variables of B<macro.pl>

Please refer to L<http://openkore.sf.net/macro> for a description of
B<macro>'s configuration file syntax.

=head1 DOCUMENTATION

=head2 functions used by macros

=over 4

=item C<setVar(variable, value)>

Sets a variable with the value given as argument. Can be accessed either
via C<getVar(I<variable>)> or directly with $varStack{variable}.

returns: 1

=item C<getVar(variable)>

Gets a variable from %varStack hash.

returns: value of $varStack{variable} or undef if empty

=item C<getNPCid(position)>

Gets the array index of the NPC located at the given position. The argument
is a string containing the X and Y coordinates, separated by a whitespace.

returns: array index or -1 if no NPC was found at the given location

=item C<getPlayerID(name, r_pool)>

Gets the array index of the player named by I<name>. It looks at r_pool,
which is a reference to a variable. r_pool can be for example \@::playersID
or \@::venderListsID.

returns: array index or -1 if no player was found with that name

=item C<getStorageID(item, r_pool)>

Gets the array index of the item I<name> in storage. It looks at r_pool,
which is a reference to a variable. r_pool can be for example \@{$cart{inventory}}
or \@::storeList.

returns: array index or -1 if the item was not found.

=item C<getInventoryAmount(item)>

Gets the amount of an item I<name> in inventory.

returns: amount

=item C<getCartAmount(item)>

Gets the amount of an item I<name> in cart.

returns: amount

=item C<getShopAmount(item)>

Gets the amount of an item I<name> in shop.

returns: amount

=item C<getSoldOut>

Gets the amount of shop slots that are sold out.

returns: amount

=item C<getRandom(items)>

I<items> is a string containing the elements separated by whitespaces.

returns: a random element of the list

=item C<pushMacro(name, n)>

Inserts another macro at the current position into the macro queue.
If I<n> is given, it will insert the macro I<n> times.

returns: 0 or undef if macro to be inserted was not found.

=item C<logMessage(message)>

Logs I<message> to openkore's console.

=item C<releaseAM(name)>

Removes automacro I<name> from run-once list.

returns: 1 if succeeded, 0 if I<name> was not found.

=back

=head2 functions used by automacros

=over 4

=item C<isInRunOnce(name)>

Checks whether automacro I<name> is in the run-once list.

returns: 1 (true), 0 (false)

=item C<checkCart()>

placeholder.

=item C<checkCast()>

placeholder.

=item C<checkClass()>

placeholder.

=item C<checkEquip()>

placeholder.

=item C<checkInventory()>

placeholder.

=item C<checkLevel()>

placeholder.

=item C<checkLoc()>

placeholder.

=item C<checkPercent()>

placeholder.

=item C<checkPerson()>

placeholder.

=item C<checkPM()>

placeholder.

=item C<checkShop()>

placeholder.

=item C<checkSoldOut()>

placeholder.

=item C<checkStatus()>

placeholder.

=item C<checkVar()>

placeholder.

=item C<checkZeny()>

placeholder.

=back

=head2 functions used by both

=over 4

=item C<ai_isIdle>

Checks whether AI is idle.

returns: 1 if AI is "macro" or "deal", else 0

=item C<findMacroID(name)>

returns: macro array index for I<name> or -1 if not found.

=item C<loadMacro(id)>

Loads macro with id I<id> into an array.

returns: this array

=item C<clearMacro>

Clears macro queue and removes 'macro' from AI queue.

=back

=head2 functions accessed via command line

=over 4

=item C<automacroReset(name)>

If I<name> is given, I<name> will be removed from automacro run-once list,
else the whole list is cleared.

=item C<usage>

Sends an usage overview to console.

=item C<showVersion>

Sends the version number to console.

=item C<list_macros>

Sends an overview of all available macros and automacros to console.

=item C<runMacro(name, n)>

Runs the macro I<name>, if I<n> is specified, it will run I<n> times.

=back

=head2 utility functions

=over 4

=item C<between(arg1, arg2, arg3)>

Checks whether I<arg2> is between (or equal) I<arg1> and I<arg3>.

returns: 1 (true), 0 (false)

=item C<cmpr(arg1, condition, arg2)>

Checks whether I<arg1> and I<arg2> match I<condition>, e.g. cmpr(12, "<=", 28).

returns: 1 (true), 0 (false)

=item C<parseArgs(string)>

Parses I<string> into it's components where I<string> is either I<arg1 arg2 arg3> or I<"arg1" arg2 arg3>.

returns: array containing the three arguments.

=item C<parseCmd(string)>

Parses I<string> and replaces all '@'-constructs if possible.

returns: parsed string, undef if I<string> was @(log|call|release|pause|set) or substitution failed. If the substitution failed, the macro queue is cleared.

=item C<parseMacroFile(filename, r_hash)>

Parses the file I<filename> for macros and automacros and puts them into the hash reference I<r_hash>.

=item C<debug(string)>

Sends I<string> to openkore's log facility if 'macro_debug' is set to 1 or higher.

=item C<error(string)>

Sends I<string> to openkore's error log facility.

=back

=head1 AVAILABILITY

Get the latest release from L<http://openkore.sf.net/macro/#download>
or via CVS:

C<cvs -d:pserver:anonymous@cvs.sf.net:/cvsroot/openkore login>

C<cvs -d:pserver:anonymous@cvs.sf.net:/cvsroot/openkore co -P macro>

=head1 AUTHOR

Arachno <arachnophobia at users dot sf dot net>
