#!/usr/bin/env perl
# extract-packets.pl by VCL
# Modified a little bit by SnT2k
# Modified to use with W32DSM by Karasu (code commented out; they conflict with the original code)

use strict;
use warnings;

if (@ARGV < 2) {
	print STDERR "No input file given. Usage: extract-packets.pl <ASM> <OUTPUT> [ADDRESS]\n" .
		"  ASM: the disassembled output of ragexe.exe, as generated by disasm.\n" .
		"  OUTPUT: the filename of the output file to write to.\n" .
		"  ADDRESS: the address of the packet size function. If not given, this program\n" .
		"           will attempt to auto-detect it.\n";
	exit(1);
}

if (!open (F, "< $ARGV[0]")) {
	print STDERR "Unable to open $ARGV[0]\n";
	exit(1);
}

our $addr;

if (!$ARGV[2]) {
	# Look for the address of the function that determines packet sizes.
	our ($found, $lastLine);
	while ((my $line = <F>)) {
		if ($line =~ /mov ecx, dword( ptr )?\[ebp-0C\]/ && $lastLine =~ /E8ED0[0-9]0000/) {
			($found) = $lastLine =~ /^:([A-Z0-9]{8})/;
			($addr) = $lastLine =~ /call ([A-Z0-9]+)/;
			last;
		}
		$lastLine = $line;
	}

	if (!defined($addr)) {
		print STDERR "Address of packet size function not found.\n";
		close(F);
		exit(1);
	}


	print "Packet size function: $addr (found at $found)\n";
} else {
	$addr = $ARGV[2];
}
print "Extracting function...\n";

# Go to that address and get the content of the entire function
our @function;
while ((my $line = <F>)) {
	my $stop = 0;
	if ($line =~ /^:$addr /) {
		while (($line = <F>)) {
			$line =~ s/[\r\n]//sg;
			#if ($line =~ /nop/) {
			if ($line eq '') {
				$stop = 1;
				last;
			}
			push(@function, $line);
		}
	}
	last if ($stop);
}
close(F);

if (@function == 0) {
	print STDERR "Unable to extract packet size function.\n";
	exit (1);
}


# Extract packets
our %packets = ();
print "Extracting packets...\n";
for (my $i = 0; $i < @function; $i++) {
	$_ = $function[$i];
	#if (/^:[A-Z0-9]+ [A-Z0-9]{14,}[\t\s]+mov (?:dword ptr )?\[ebp.*?\], ([0-9A-Z]{8,})$/) {
	 if (/^:[A-Z0-9]+ [A-Z0-9]{14,}[\t\s]+mov dword\[.*?\], ([0-9A-Z]{8,})$/) {
		my $packet = substr($1, 4);
		my $size = 0;
		for ($i = $i + 1; $i < @function; $i++) {
			$_ = $function[$i];
			#if (/^:[A-Z0-9]+ [A-Z0-9]{12,}[\t\s]+mov (?:dword ptr )?\[eax.*?\], ([0-9A-Z]{8,})$/) {
			 if (/^:[A-Z0-9]+ [A-Z0-9]{12,}[\t\s]+mov dword\[eax.*?\], ([0-9A-Z]{8,})$/) {
				# Packet size
				$size = hex($1);
				last;
			#} elsif (/^:[A-Z0-9]+ [A-Z0-9]{14,}[\t\s]+mov (?:dword ptr )?\[ebp.*?\], ([0-9A-Z]{8,})$/) {
			 } elsif (/:[A-Z0-9]+ [A-Z0-9]{14,}[\t\s]+mov dword\[.*?\], ([0-9A-Z]{8,})$/) {
				# New packet switch
				$i--;
				last;
			}
		}
		$packets{$packet} = $size;
	}
}

open(F, "> $ARGV[1]");
foreach my $key (sort keys %packets) {
	print F "$key $packets{$key}\n";
}
close(F);
print "Done.\n";
